-- programs ------------------------------------------------

entrypoints Program ;

Program.    Program ::= [TopDef] ;

FnDef.	    TopDef ::= FNDef ;

StructDef.  TopDef ::= StructDecl ; 

Global.     TopDef ::= Decl ;

separator nonempty TopDef "" ;

VArg. 	   Arg ::= Type Ident;     ;

RArg.      Arg ::= Type "&" Ident; ;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

DeclS.     Stmt ::= Decl ;

DeclF.     Stmt ::= FNDef ;

Decl.      Decl ::= Type Item ";" ;

SDecl.     SDeclItem ::= Type Ident;

FNDef.     FNDef ::= Type Ident "(" [Arg] ")" Block ;

ArrayDecl. Stmt ::= Type "[" Expr "]" Ident;

separator   SDeclItem ";" ;

StructDecl. StructDecl ::= "struct" Ident "{" [ SDeclItem] "}" ";";

Struct.     Stmt ::= StructDecl;

LValue.         LValue  ::= Ident ;

Select.     LValue   ::= LValue "." Ident ;

ArraySelect. LValue   ::= LValue "[" Expr "]" ;

NoInit.    Item ::= LValue ; 

Init.      Item ::= LValue "=" Expr ;

separator nonempty Item "," ;

For.       Stmt ::= "for" "(" Stmt Expr ";" Stmt ")" Block;

While.     Stmt ::= "while" "(" Expr ")" Block;

Print.      Stmt ::= "print" "(" Expr ")" ";" ;

Ass.       Stmt ::= LValue "=" Expr  ";" ;

Incr.      Stmt ::= LValue "++"  ";" ;

Decr.      Stmt ::= LValue "--"  ";" ;

Break.     Stmt ::= "break" ";" ;

Continue. Stmt ::= "continue" ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Block ;

CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

SExp.      Stmt ::= Expr  ";" ;


-- Types ---------------------------------------------------

Int.           Type ::= "int" ;

Str.           Type ::= "string" ;

Bool.          Type ::= "bool" ;

Void.          Type ::= "void" ;

Array.         Type ::= "[]" Type ;

StructType.    Type ::= "struct" Ident ;

internal  Fun. Type ::= Type "(" [Type] ")" ;

LambdaType.    Type ::= "(" [ LambArg ]")" "=>" Type ;

LambVArg. LambArg ::= Type ;

LambRArg. LambArg ::= "&" Type ;

separator  Type "," ;

separator LambArg "," ;

LambSuppliedVArgWithType. LambSuppliedArgWithType ::= Ident "::" Type ;

LambSuppliedRArgWithType. LambSuppliedArgWithType ::= Ident "::" "&" Type ;

separator LambSuppliedArgWithType "," ;

-- Expressions ---------------------------------------------
ELambda. Expr8 ::= Type "::" "(" [ LambSuppliedArgWithType ]")"  "->" Block;

EApp.      Expr7 ::= LValue "(" [ Expr ] ")" ;

EAppLambda. Expr7 ::= Expr8 "(" [ Expr ] ")" ;

EVar.      Expr6 ::= LValue ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EString.   Expr6 ::= String ;

ECast.      Expr5 ::= "cast (" Type ")" Expr6;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 8 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

